@use "sass:map";

/// Fonce légèrement une couleur avec du noir
/// @access public
/// @param {Color} $color - Couleur à foncer
/// @param {Number} $percentage - Pourcentage de traitement sur `$color`
/// @return {Color}
@function shade($color, $percentage, $map: null) {
  @if ($map == null) {
    $color-shade: hsl(0, 0%, 0%);
    @return mix($color-shade, $color, $percentage);
  } @else {

  }
}

@function light($color, $percentage, $map: null) {
  @if ($map == null) {
    $color-light: hsl(255, 100%, 100%);
    @return mix($color-light, $color, $percentage);
  } @else {
    $mix: mix($color-light, $color, $percentage);
    @return scss-var()
  }
}

/*
  Returns a CSS variable property specific to theming.
  Accepts an optional fallback, and optional map.
  - SCSS: color: scss-var($ea--theme-primary, blue)
  - CSS:  color: var(--theme-primary, blue)
  Throws error if the variable not part of the map
*/
@function scss-var($key, $map, $fallback: null) {
  //@if not map-has-key($map, $key) {
  //  @error "key: '#{$key}', is not a key in map: #{$map}";
  //}
  @if ($map) {
    @if ($fallback) {
      @return var($key, $fallback);
    } @else {
      @return var($key);
    }
  } @else {
    @error "map is null";
  }
}